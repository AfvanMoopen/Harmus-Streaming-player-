

#ifndef CODEC_BODY_TEST_H
#define CODEC_BODY_TEST_H

#include <iostream>
#include <stdint.h>
#include "vassert.h"
#include "stream/buffer.h"
#include "demuxer/body.h"

void test_body() {
  cout << "\033[33m " << "body: \033[0m" << endl;
  uint8_t ptr[] = {0x00, 0x00, 0x00, 0x00,
                   0x12, 0x00, 0x01, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0a, 0x6f, 0x6e,
                   0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x64,
                   0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x40, 0x3c, 0x0b, 0x85, 0x1e, 0xb8, 0x51, 0xec,
                   0x00, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x00, 0x40, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x40, 0x86, 0x80, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65,
                   0x00, 0x40, 0x9f, 0x55, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65,
                   0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0x37, 0xf9, 0xdc, 0xdc, 0xfe, 0x09, 0x5d, 0x00, 0x0c, 0x76,
                   0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x00, 0x40, 0x1c, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x72,
                   0x61, 0x74, 0x65, 0x00, 0x40, 0x5e, 0xaa, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x75,
                   0x64, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0xe5,
                   0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x61, 0x6d,
                   0x70, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x40, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x01, 0x01, 0x00, 0x0c, 0x61, 0x75, 0x64, 0x69,
                   0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x00, 0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x02, 0x00,
                   0x04, 0x6d, 0x70, 0x34, 0x32, 0x00, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72,
                   0x73, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x01, 0x30, 0x00, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
                   0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x02, 0x00, 0x08, 0x69, 0x73,
                   0x6f, 0x6d, 0x6d, 0x70, 0x34, 0x32, 0x00, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x02,
                   0x00, 0x0d, 0x4c, 0x61, 0x76, 0x66, 0x35, 0x37, 0x2e, 0x31, 0x39, 0x2e, 0x31, 0x30, 0x30, 0x00,
                   0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x41, 0x5d, 0x36, 0x79, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x09,
                   0x00, 0x00, 0x00, 0x00,
                   0x09, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
                   0x01, 0x4d, 0x40, 0x1f, 0xff, 0xe1, 0x00, 0x1b, 0x67, 0x4d, 0x40, 0x1f, 0xe8, 0x80, 0x28, 0x02,
                   0xdd, 0x80, 0xb5, 0x01, 0x01, 0x01, 0x40, 0x00, 0x00, 0xfa, 0x40, 0x00, 0x2e, 0xe0, 0x03, 0xc6,
                   0x0c, 0x44, 0x80, 0x01, 0x00, 0x04, 0x68, 0xeb, 0xaf, 0x20,
                   0x00, 0x00, 0x00, 0x00,
                   0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x12, 0x10,
                   0x00, 0x00, 0x00, 0x00};
  shared_ptr<Buffer> b = make_shared<Buffer>(ptr, 462);
  Body body;
  shared_ptr<BodyValue> values = body.decode(b);
  VASSERT(!values->unvalidate, "");
  VASSERT(values->tags->size() == 3, "");
  VASSERT(values->buffer->get_length() == 4, "");

  VASSERT(true, "Body pass");
}

#endif //CODEC_BODY_TEST_H
